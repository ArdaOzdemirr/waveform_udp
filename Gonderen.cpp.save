#include "Gonderen.h"
#include <iostream>
#include <cstring>
Gonderen::Gonderen(const std::string& ip, int port) : Gonderen(ip, static_cast<uint16_t>(port)) {}
Gonderen::Gonderen(const std::string& ip, uint16_t port) {
#ifdef _WIN32
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cerr << "WSAStartup failed\n";
        exit(1);
    }
#endif
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(port);
    inet_pton(AF_INET, ip.c_str(), &server_addr.sin_addr);
    socket_fd = socket(AF_INET, SOCK_DGRAM, 0);
    if (socket_fd == INVALID_SOCKET) {
#ifdef _WIN32
        std::cerr << "Socket error: " << WSAGetLastError() << "\n";
#else
        std::cerr << "Socket error: " << errno << "\n";
#endif
        exit(1);
    }
}
Gonderen::~Gonderen() {
#ifdef _WIN32
    closesocket(socket_fd);
    WSACleanup();
#else
    close(socket_fd);
#endif
}
void Gonderen::send_data(int64_t timestamp, float value) {
    char buffer[12];
    memcpy(buffer, &timestamp, sizeof(timestamp));
    memcpy(buffer + sizeof(timestamp), &value, sizeof(value));
    int sent_bytes = sendto(socket_fd, buffer, sizeof(buffer), 0, (struct sockaddr*)&server_addr, sizeof(server_addr));
    if (sent_bytes == SOCKET_ERROR) {
#ifdef _WIN32
        std::cerr << "Send error: " << WSAGetLastError() << "\n";
#else
        std::cerr << "Send error: " << errno << "\n";
#endif
    }
    else {
        std::cout << "Gonderilen: " << timestamp << ", " << value << "\n";
    }
}
